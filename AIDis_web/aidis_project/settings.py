"""
Django settings for aidis_project project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
# Not: İstersen ortam değişkeniyle de verebilirsin.
SECRET_KEY = os.getenv(
    "DJANGO_SECRET_KEY",
    "django-insecure-&n&)s)8yi6-$@x75v5q#5x#8u08%m&g+05#d#0ax1@otp1(j=6",
)

# SECURITY WARNING: don't run with debug turned on in production!
<<<<<<< HEAD
DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() in {"1", "true", "yes"}

# Virgülle ayrılmış ALLOWED_HOSTS; boşsa [] kalır
ALLOWED_HOSTS = [h for h in os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if h] or []
=======
DEBUG = os.getenv("DJANGO_DEBUG", "False").lower() in {"1", "true", "yes"}

# Virgülle ayrılmış ALLOWED_HOSTS; boşsa [] kalır
ALLOWED_HOSTS = [h for h in os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if h] or ['*']
>>>>>>> 4f8f6e8 (Initiall commit)

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "aidis_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "aidis_project.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]  # geliştirici statikleri
<<<<<<< HEAD
STATIC_ROOT = BASE_DIR / "staticfiles"    # collectstatic için (deploy’da işe yarar)
=======
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')    # collectstatic için (deploy’da işe yarar)
>>>>>>> 4f8f6e8 (Initiall commit)

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ------------------------------------------------------------------------------
# AIDis parse/tahmin ayarları (.env olmadan settings'ten yönetim)
# utils.py os.getenv(...) ile okur; burada değerler env'e enjekte edilir.
# Production ortamında gerçek ortam değişkeni set edersen, onları bozmaz (setdefault etkisi).
# ------------------------------------------------------------------------------
import os as _os

AIDIS_OVERRIDES = {
    # parse
    "AIDIS_MIN_AREA_RATIO": "0.0014",
    "AIDIS_MIN_GAP_FR": "0.10",
    "AIDIS_MIN_HEIGHT_FR": "0.40",
    "AIDIS_BLOCK": "31",
    "AIDIS_C": "5",
    "AIDIS_MAX_W_RATIO": "0.20",
    "AIDIS_SPLIT_W_MUL": "2.0",
    "AIDIS_DESKEW_MAX": "15.0",

    # tahmin
    "AIDIS_IMG_SIZE": "28",
    "AIDIS_TTA_INVERT": "1",
    "AIDIS_USE_DUAL_THRESH": "1",
    "AIDIS_DYS_MIN": "0.80",
    "AIDIS_NRM_MIN": "0.30",
    "AIDIS_MARGIN_MIN": "0.20",
    # "AIDIS_THR": "0.25"  # tek eşik modunu kullanmıyoruz; gerekirse bırak
}


for _k, _v in AIDIS_OVERRIDES.items():
    _os.environ.setdefault(_k, str(_v))
# ------------------------------------------------------------------------------
