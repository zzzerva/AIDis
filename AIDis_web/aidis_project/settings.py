"""
Django settings for aidis_project project.
Generated by 'django-admin startproject' using Django 5.2.6.
"""

from pathlib import Path
import os

# ------------------------------------------------------------------------------
# Paths
# ------------------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent

# ------------------------------------------------------------------------------
# Core security switches (read from environment)
# ------------------------------------------------------------------------------
# DEBUG: prefer "DEBUG", fallback "DJANGO_DEBUG"
_DEBUG_ENV = os.getenv("DEBUG", os.getenv("DJANGO_DEBUG", "False"))
DEBUG = str(_DEBUG_ENV).strip().lower() in {"1", "true", "yes", "on"}

# SECRET_KEY: prod'da env'den gelmeli; DEBUG'da dev anahtarı kullan
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
if not SECRET_KEY:
    if DEBUG:
        SECRET_KEY = "dev-only-secret-key"  # sadece local geliştirme
    else:
        raise RuntimeError("DJANGO_SECRET_KEY ortam değişkeni ayarlı değil.")

# Allowed hosts (env ile override edilebilir)
ALLOWED_HOSTS = [h for h in os.getenv("DJANGO_ALLOWED_HOSTS", "").split(",") if h] or [
    "localhost",
    "127.0.0.1",
    ".onrender.com",
]
_render_host = os.getenv("RENDER_EXTERNAL_HOSTNAME")
if _render_host and _render_host not in ALLOWED_HOSTS:
    ALLOWED_HOSTS.append(_render_host)

# CSRF güvenilen origin'ler (Render için gerekli)
CSRF_TRUSTED_ORIGINS = ["https://*.onrender.com"]
if _render_host:
    CSRF_TRUSTED_ORIGINS.append(f"https://{_render_host}")

# Proxy/SSL (Render gibi reverse proxy arkasında HTTPS algılansın)
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG

# ------------------------------------------------------------------------------
# Apps
# ------------------------------------------------------------------------------
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
]

# ------------------------------------------------------------------------------
# Middleware
# ------------------------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    # WhiteNoise: static dosyaları uygulama içinden servis eder (prod)
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# ------------------------------------------------------------------------------
# URLs / WSGI
# ------------------------------------------------------------------------------
ROOT_URLCONF = "aidis_project.urls"
WSGI_APPLICATION = "aidis_project.wsgi.application"

# ------------------------------------------------------------------------------
# Templates
# ------------------------------------------------------------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ------------------------------------------------------------------------------
# Database
# - Varsayılan: SQLite
# - Eğer DATABASE_URL varsa ve dj-database-url kuruluysa onu kullanır
# ------------------------------------------------------------------------------
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}
_db_url = os.getenv("DATABASE_URL")
if _db_url:
    try:
        import dj_database_url

        DATABASES["default"] = dj_database_url.config(
            default=_db_url, conn_max_age=600, ssl_require=True
        )
    except Exception:
        # dj-database-url yoksa sessizce SQLite ile devam eder
        pass

# ------------------------------------------------------------------------------
# Password validation
# ------------------------------------------------------------------------------
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ------------------------------------------------------------------------------
# I18N
# ------------------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------------------------
# Static & Media (WhiteNoise ile prod statikleri)
# ------------------------------------------------------------------------------
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "staticfiles"
# Lokal geliştirme için /static klasörün varsa dahil et
STATICFILES_DIRS = [BASE_DIR / "static"] if (BASE_DIR / "static").exists() else []

# Django 4+ için önerilen STORAGES yapılandırması (WhiteNoise manifest)
STORAGES = {
    "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
    "staticfiles": {"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"},
}

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"  # Kalıcı disk bağlarsan burayı mount path yap

# ------------------------------------------------------------------------------
# Defaults
# ------------------------------------------------------------------------------
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# ------------------------------------------------------------------------------
# AIDis parse/tahmin varsayılanları
# utils.py içinde os.getenv(...) ile okunur; burada setdefault ile dev/örnek
# değerler veriyoruz. Prod ortamda gerçek env set edersen onları bozmaz.
# ------------------------------------------------------------------------------
_AIDIS_DEFAULTS = {
    # parse
    "AIDIS_MIN_AREA_RATIO": "0.0014",
    "AIDIS_MIN_GAP_FR": "0.10",
    "AIDIS_MIN_HEIGHT_FR": "0.40",
    "AIDIS_BLOCK": "31",
    "AIDIS_C": "5",
    "AIDIS_MAX_W_RATIO": "0.20",
    "AIDIS_SPLIT_W_MUL": "2.0",
    "AIDIS_DESKEW_MAX": "15.0",
    # tahmin
    "AIDIS_IMG_SIZE": "28",
    "AIDIS_TTA_INVERT": "1",
    "AIDIS_USE_DUAL_THRESH": "1",
    "AIDIS_DYS_MIN": "0.80",
    "AIDIS_NRM_MIN": "0.30",
    "AIDIS_MARGIN_MIN": "0.20",
    # "AIDIS_THR": "0.25",  # tek eşik kullanacaksan aç
}
for _k, _v in _AIDIS_DEFAULTS.items():
    os.environ.setdefault(_k, str(_v))
